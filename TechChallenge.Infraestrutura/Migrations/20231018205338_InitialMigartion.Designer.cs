// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechChallenge.Infraestrutura.Repositories;

#nullable disable

namespace TechChallenge.Infraestrutura.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231018205338_InitialMigartion")]
    partial class InitialMigartion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TechChallenge.Dominio.Atividade.Atividade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ContagemDePrazo")
                        .HasColumnType("int");

                    b.Property<int>("DepartamentoResponsavel")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("EstahAtiva")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PrazoEstimado")
                        .HasColumnType("int");

                    b.Property<int>("Prioridade")
                        .HasColumnType("int");

                    b.Property<int>("TipoDeDistribuicao")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Atividades");
                });

            modelBuilder.Entity("TechChallenge.Dominio.Demanda.Demanda", b =>
                {
                    b.Property<long>("NumeroDaDemanda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int?>("AtividadeId")
                        .HasColumnType("int");

                    b.Property<int>("DepartamentoResponsavel")
                        .HasColumnType("int");

                    b.Property<int>("DepartamentoSolicitante")
                        .HasColumnType("int");

                    b.Property<string>("Detalhes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("MomentoDeAbertura")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("MomentoDeFechamento")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("NumeroDaDemandaDesdobrada")
                        .HasColumnType("bigint");

                    b.Property<long>("NumeroDaDemandaReaberta")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Prazo")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Situacao")
                        .HasColumnType("int");

                    b.Property<long?>("UsuarioResponsavelId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsuarioSolicitanteId")
                        .HasColumnType("bigint");

                    b.HasKey("NumeroDaDemanda");

                    b.HasIndex("AtividadeId");

                    b.HasIndex("UsuarioResponsavelId");

                    b.HasIndex("UsuarioSolicitanteId");

                    b.ToTable("Demandas");
                });

            modelBuilder.Entity("TechChallenge.Dominio.EventoRegistrado.EventoRegistrado", b =>
                {
                    b.Property<short>("NumeroDoRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    b.Property<long?>("DemandaNumeroDaDemanda")
                        .HasColumnType("bigint");

                    b.Property<int>("DepartamentoResponsavel")
                        .HasColumnType("int");

                    b.Property<string>("Mensagem")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("MomentoFinal")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("MomentoInicial")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Situacao")
                        .HasColumnType("int");

                    b.Property<long>("UsuarioResponsavelId")
                        .HasColumnType("bigint");

                    b.HasKey("NumeroDoRegistro");

                    b.HasIndex("DemandaNumeroDaDemanda");

                    b.HasIndex("UsuarioResponsavelId");

                    b.ToTable("EventosRegistrados");
                });

            modelBuilder.Entity("TechChallenge.Dominio.Usuario.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int?>("AtividadeId")
                        .HasColumnType("int");

                    b.Property<int>("Departamento")
                        .HasColumnType("int");

                    b.Property<int>("Funcao")
                        .HasColumnType("int");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AtividadeId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("TechChallenge.Dominio.Demanda.Demanda", b =>
                {
                    b.HasOne("TechChallenge.Dominio.Atividade.Atividade", "Atividade")
                        .WithMany("Demandas")
                        .HasForeignKey("AtividadeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TechChallenge.Dominio.Usuario.Usuario", "UsuarioResponsavel")
                        .WithMany()
                        .HasForeignKey("UsuarioResponsavelId");

                    b.HasOne("TechChallenge.Dominio.Usuario.Usuario", "UsuarioSolicitante")
                        .WithMany()
                        .HasForeignKey("UsuarioSolicitanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Atividade");

                    b.Navigation("UsuarioResponsavel");

                    b.Navigation("UsuarioSolicitante");
                });

            modelBuilder.Entity("TechChallenge.Dominio.EventoRegistrado.EventoRegistrado", b =>
                {
                    b.HasOne("TechChallenge.Dominio.Demanda.Demanda", "Demanda")
                        .WithMany("Historico")
                        .HasForeignKey("DemandaNumeroDaDemanda")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TechChallenge.Dominio.Usuario.Usuario", "UsuarioResponsavel")
                        .WithMany()
                        .HasForeignKey("UsuarioResponsavelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Demanda");

                    b.Navigation("UsuarioResponsavel");
                });

            modelBuilder.Entity("TechChallenge.Dominio.Usuario.Usuario", b =>
                {
                    b.HasOne("TechChallenge.Dominio.Atividade.Atividade", null)
                        .WithMany("Solucionadores")
                        .HasForeignKey("AtividadeId");
                });

            modelBuilder.Entity("TechChallenge.Dominio.Atividade.Atividade", b =>
                {
                    b.Navigation("Demandas");

                    b.Navigation("Solucionadores");
                });

            modelBuilder.Entity("TechChallenge.Dominio.Demanda.Demanda", b =>
                {
                    b.Navigation("Historico");
                });
#pragma warning restore 612, 618
        }
    }
}
